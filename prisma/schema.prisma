// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BetOutcome {
  WIN
  LOSE
  PENDING
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bets         Bet[]
  transactions Transaction[]
  leaderboard  Leaderboard[]
  wallet       Wallet?
  settings     Settings?
}

model Game {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  rules       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bets        Bet[]
  leaderboard Leaderboard[]
}

model Bet {
  id        Int      @id @default(autoincrement())
  userId    Int
  gameId    Int
  amount    Float
  outcome   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Leaderboard {
  id        Int      @id @default(autoincrement())
  gameId    Int
  userId    Int
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Settings {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  notificationPreferences Json?
  privacyPreferences      Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
